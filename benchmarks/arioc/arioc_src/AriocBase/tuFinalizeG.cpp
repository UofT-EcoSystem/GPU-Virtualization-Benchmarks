/*
  tuFinalizeG.cpp

    Copyright (c) 2015-2019 Johns Hopkins University.  All rights reserved.

    This file is part of the Arioc software distribution.  It is subject to the license terms
    in the LICENSE.txt file found in the top-level directory of the Arioc software distribution.
    The contents of this file, in whole or in part, may only be copied, modified, propagated, or
    redistributed in accordance with the license terms contained in LICENSE.txt.
*/
#include "stdafx.h"

#pragma region constructor/destructor
/// [private] constructor
tuFinalizeG::tuFinalizeG()
{
}

/// <summary>
/// Finalizes BRLEAs generated by the gapped-aligner CUDA kernel.
/// </summary>
tuFinalizeG::tuFinalizeG( QBatch* pqb, HostBuffers* phb ) : m_pqb(pqb), m_phb(phb)
{
}

/// destructor
tuFinalizeG::~tuFinalizeG()
{
}
#pragma endregion

#pragma region virtual method implementations
/// <summary>
/// Reformats and consolidates the BRLEAs generated by gapped-alignment traceback
/// </summary>
void tuFinalizeG::main()
{
    CDPrint( cdpCD3, "[%d] %s::%s...", m_pqb->pgi->deviceId, m_ptum->Key, __FUNCTION__ );

    // compute the number of bytes reserved for each BRLEA string (excluding the header)
    const size_t cbBRLEA = (m_pqb->celBRLEAperQ*sizeof(UINT32)) - sizeof(BRLEAheader);

    // point to the start of the BRLEA buffer
    BRLEAheader* pBH = reinterpret_cast<BRLEAheader*>(m_phb->BRLEA.p);
    BRLEAheader* pBHlimit = reinterpret_cast<BRLEAheader*>(m_phb->BRLEA.p + m_phb->BRLEA.n);

    // traverse the list of BRLEAs
    while( pBH < pBHlimit )
    {
        // point to the first free byte in the BRLEA buffer
        char* pTo = reinterpret_cast<char*>(pBH+1);

        // point beyond the last byte of BRLEA data
        BRLEAheader* pBHnext = reinterpret_cast<BRLEAheader*>(reinterpret_cast<UINT32*>(pBH) + m_pqb->celBRLEAperQ);
    
        // point to the first byte of BRLEA data
        char* pFrom = reinterpret_cast<char*>(pBHnext) - pBH->cb;

        // slide the BRLEA data into position
        memmove( pTo, pFrom, pBH->cb );

#ifdef _DEBUG
        BRLEAbyte* p = reinterpret_cast<BRLEAbyte*>(pTo);
        if( (p->bbType != bbMatch) ||                   // always start with a match
            (pBH->cb > static_cast<INT16>(cbBRLEA)) )   // look for overflow
        {
            UINT32 iw = QID_IW(pBH->qid);
            INT16 iq = QID_IQ(pBH->qid);
            Qwarp* pQw = m_pqb->QwBuffer.p + iw;
            UINT64 sqId = pQw->sqId[iq];

            if( p->bbType != bbMatch )
                CDPrint( cdpCD0, "%s (%s): BRLEA does not start with a match! (qid=0x%08x sqId=0x%016llx)", __FUNCTION__, __FILE__, pBH->qid, sqId );
            if( pBH->cb > static_cast<INT16>(cbBRLEA) )
                CDPrint( cdpCD0, "%s (%s): BRLEA count out of range (%d > %u)! (qid=0x%08x sqId=0x%016llx)", __FUNCTION__, __FILE__, pBH->cb, cbBRLEA, pBH->qid, sqId );

            // dump the faulty BRLEA
            CDPrint( cdpCD0, "pBH->subId=%u J=%u (0x%08X) Il=%d Ir=%d Ma=%d cb=%d V=%d", pBH->subId, pBH->J, pBH->J, pBH->Il, pBH->Ir, pBH->Ma, pBH->cb, pBH->V );
            char buf[256] = { 0 };
            for( INT16 ibb=0; ibb<pBH->cb; ++ibb )
            {
                size_t cbBuf = strlen( buf );
#pragma warning ( push )
#pragma warning ( disable:4477 )
                sprintf_s( buf+cbBuf, (sizeof buf)-cbBuf, "%02X ", p[ibb] );
#pragma warning ( pop )
            }
            CDPrint( cdpCD0, buf );
        }
#endif


        // zero the trailing bytes
        memset( pTo+pBH->cb, 0, cbBRLEA-pBH->cb );

        // point to the next BRLEA
        pBH = pBHnext;
    }

    // record the total number of mappings
    m_phb->nMapped = m_phb->BRLEA.n / m_pqb->celBRLEAperQ;

    // performance metrics
    InterlockedExchangeAdd( &m_ptum->ms.Elapsed, m_hrt.GetElapsed(false) );

    CDPrint( cdpCD3, "[%d] %s::%s: completed", m_pqb->pgi->deviceId, m_ptum->Key, __FUNCTION__ );
}
